
services:   # описываем сервисы приложения
  web:   # сервис django приложения
    build: .   # собираем образ из текущей директории

    # выполняем миграции, собираем статические файлы и запускаем сервер gunicorn
    command: sh -c "python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"

    volumes: # Монтирование текущей директории и тома для статических файлов
      - .:/app
      - static_volumes:/app/staticfiles

    expose: # Открываем порт 8000 внутри docker-сети.
      - "8000"

    # Указываем, что сервис зависит от базы данных и Redis.
    depends_on:
      - db
      - redis

    # Подключаем файл с переменными окружения
    env_file:
      - ./.env

  nginx: # сервис nginx
    build: # собираем из директории /nginx
      context: ./nginx
    ports:
      - "80:80" # пробрасываем хост 80 на хост машины

    # монтируем конфигурацию nginx и том со статическими файлами
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles

    # Указываем, что nginx зависит от сервиса web
    depends_on:
      - web

  db:  # сервис базы данных postgresql
    image: postgres:16
    # монтируем том для хранения базы данных
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # подключаем файл с переменными окружения
    env_file:
      - ./.env

  redis:  # описываем redis
    image: redis:7  # скачиваем образ официальной версии
    volumes:  # монтируем том для хранения данных redis
      - redis_data:/data
    # подключаем файл с переменными окружения
    env_file:
      - ./.env


# Объявляем тома, для сохранения данных между перезапусками
volumes:
  postgres_data:
  static_volume:
  redis_data: