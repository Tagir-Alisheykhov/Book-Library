# имя workflow и события, которые будут его запускать
name: Django-Library CI

on: [push, pull_request]


# добавляем работу
jobs:
  # тестирование приложения
  test:
    # среда выполнения задач
    runs-on: ubuntu-latest

    # шаги выполнения
    steps:
      # клонирования репозитория с исходным кодом
      - name: Check out code
        uses: actions/checkout@v3

      # установка python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # установка poetry
      - name: Install poetry
        run: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Для ускорения workflow можно добавить кэширование:
      - name: Cache dependencies
        uses: actions/cache@v3
        # указываем кэшу путь к зависимостям
        with:
          path: | 
            ~/.cache/pypoetry
            .venv
          # а также ключ для кэша, основан на операционной системе и хэша файла poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # если нет ключа, то используем ближайший ключ по префиксу
          restore-keys: ${{ runner.os }}-poetry-


      # установка зависимостей
      - name: Install dependencies
        run: | 
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      # применение миграций
      - name: Run migrate
        run: poetry run python manage.py migrate

      - name: Run tests
        run: poetry run python manage.py test
